<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprMaskPlayer_new</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics setup

frozen = false; // If true, player cannot move || 操作を禁止しているときはtrue、普通はfalse
jump = 8.5; // Jump speed || １段目のジャンプの初速度
jump2 = 7; // Doublejump speed || ２段目のジャンプの初速度
djump = true; // If true, player can doublejump || ２段目のジャンプが可能ならtrue、不可能ならfalse
maxSpeed = 3; // Horizontal walking speed || 左右の移動速度（hspeed）
gravity = 0.4; // Player gravity || 重力
maxVspeed = 9; // Maximum speed up or down || 上下の最大速度（vspeed）
maxVspeed2 = 9;
image_speed = 0.2; // Animation speed (frames per tick) || アニメーションの速度
onPlatform = 0; // If true, player is on a platform
xScale = 1; // Used instead of image_xscale to draw player, so the player's hitbox is consistent.
writeRoomCaption();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///playerKiller collision check
if (place_meeting(round(x),round(y),playerKiller)) {
    killPlayer();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and Controls
var L,R,h;

// Check if pressing left/right || 左右のキー入力のチェック
L = keyboard_check_direct(global.leftbutton);
R = keyboard_check_direct(global.rightbutton);

// If pressing right, go right || 右ボタンを押していれば右
// If not pressing right, and pressing left, go left || 右ボタンを押していない状態で左ボタンを押していれば左
h = R;
if (h == 0) h = -L;
// If frozen, don't move || frozenに値が入っていれば行動禁止
if (frozen == true) h = 0;

// If we're moving || 左右の移動
if (h != 0) {
    // Set speed based on direction and maxSpeed || 走っている状態にする
    hspeed = maxSpeed*h;
    // 画像の左右を指定（負が入ると画像が左右反転する）
    //flip=(image_xscale!=h);
    xScale = h;
    
    // Set the sprite to the running sprite || 走っている画像に変更
    sprite_index = sprPlayerRunning;
    image_speed = 0.5;
} else {
    // Set speed to zero || 直立状態にする
    hspeed = 0;
    // Set the sprite to the idle sprite || 直立画像に変更
    sprite_index = sprPlayerIdle;
    image_speed = 0.2;
}


if (!onPlatform) {
    // Set the sprite to jumping/falling if we're moving vertically and were not on a platform || ジャンプ・落下画像に変更
    if (vspeed &lt; -0.05) {
        sprite_index = sprPlayerJump;
    }
    if (vspeed &gt; 0.05) {
        sprite_index = sprPlayerFall;
    }
} else { // If we were on a platform, but we're not anymore, then set onPlatform to false || 動く台に乗ってる状態から解除された瞬間
    if (place_meeting(x,y+4,platform) == false) {
        onPlatform = 0;
    }
}

// Limit vspeed || vspeedが最大値を超えたら、最大値に固定
if (vspeed &gt; maxVspeed) {
    vspeed = maxVspeed;
}

// If not frozen || frozenに値が入っていない（行動可能）
if (!frozen) {
    // Shoot || プレイヤーの攻撃
    if (keyboard_check_pressed(global.shotbutton)) {
        playerShoot();
    }
    // Jump || ジャンプ（押した）
    if (keyboard_check_pressed(global.jumpbutton)) {
        playerJump();
    }
    // Jump Release || ジャンプ（離した）
    if (keyboard_check_released(global.jumpbutton)) {
        playerVJump();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vinejumps
//Remove this script if you don't want vinejumps = everything is contained in here


if distance_to_object(WalljumpL) &lt; 2 &amp;&amp; place_free(x,y+1) 
{
    vspeed=2;
    maxFallSpeed=2;
    sprite_index=sprPlayerSliding;
    xScale=1
    image_speed=1/2;
    if keyboard_check_pressed(global.rightbutton) &amp;&amp; keyboard_check(global.jumpbutton) {
        sprite_index=sprPlayerJump;
        vspeed = -9;
        hspeed = 15;
        audio_play_sound(sndWallJump,0,0);
    }
    
    if keyboard_check_pressed(global.rightbutton) &amp;&amp; !keyboard_check(global.jumpbutton) {
        hspeed=3
        maxFallSpeed=8
        sprite_index=sprPlayerFall;
    }

}

if distance_to_object(WalljumpR) = 1 &amp;&amp; place_free(x,y+1) {
    vspeed=2;
    maxFallSpeed=2;
    sprite_index=sprPlayerSliding;
    xScale=-1
    image_speed=1/2;

    if keyboard_check_pressed(global.leftbutton) &amp;&amp; keyboard_check(global.jumpbutton) {
        sprite_index=sprPlayerJump;
        vspeed = -9;
        hspeed = -15;
        audio_play_sound(sndWallJump,0,0);
    }
    
    if keyboard_check_pressed(global.leftbutton) &amp;&amp; !keyboard_check(global.jumpbutton) {
        hspeed=-3
        maxFallSpeed=8
        sprite_index=sprPlayerFall;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="platform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with platforms
if(y-vspeed/2 &lt;= other.y){
  if(other.vspeed &gt;= 0){
    y = other.y-9;
    vspeed = other.vspeed;
    djump = true;
  }
  onPlatform = 1;
  djump = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="block">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic collision with blocks
if(!place_free(x+hspeed,y))
{
  if(hspeed &lt;= 0){move_contact_solid(180,abs(hspeed));}
  if(hspeed &gt; 0){move_contact_solid(0,abs(hspeed));}
  hspeed = 0;
}
 
if(!place_free(x,y+vspeed))
{
  if(vspeed &lt;= 0){move_contact_solid(90,abs(vspeed));}
  if(vspeed &gt; 0){move_contact_solid(270,abs(vspeed));djump=1;}
  vspeed = 0;
}

if (!place_free(x+hspeed,y+vspeed)){hspeed=0;}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Suicide

killPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room switching or killing

// Check if the player is outside the room || ルームの外に居るかどうかのチェック
if (x&lt;0 || x&gt;room_width || y&lt;0 || y&gt;room_height) {
    // If he's touching a roomChanger, then get the 'roomTo' value from it || 近くにroomChangerが有れば、そのroomToのルームに移動。無ければ死亡
    if (place_meeting(x,y,roomChanger) == false) {
        killPlayer();
    } else {
        room_goto(instance_position(x,y,roomChanger).roomTo);
    }
    
    // Switch to the other side of the room if you exited(requires room sizes to be the same) || 座標合わせ（ルームのサイズが同じでないと挙動が変になります）
    if (x &lt; 0) {
        x += room_width;
        y -= vspeed;
    } else if (x &gt; room_width) {
        x -= room_width;
        y -= vspeed;
    } else if (y &lt; 0) {
        y += room_height;
        x -= (x-xprevious)+1;
    } else if (y &gt; room_height) {
        y -= room_height;
        x -= (x-xprevious)+1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//floor the player coordinates so that he displays in the correct spot
draw_sprite_ext(sprite_index,image_index,floor(x),floor(y),xScale,image_yscale,image_angle,image_blend,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>17,23</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
